variables:
  LIBGDIPLUS_VERSION: '5.23'

jobs:
- job: macos
  pool:
    vmImage: 'xcode9-macos10.13'
  steps:
  - script: |
      brew install autoconf automake libtool pkg-config
    displayName: Install autotools
  - script: |
      cd runtime.osx.10.10-x64.CoreCompat.System.Drawing
      git clone https://github.com/mono/libgdiplus --depth 1 --single-branch --branch master
      brew install libtiff giflib libjpeg glib cairo freetype fontconfig libpng
    displayName: Download sources, install dependencies
  - script: |
      cd runtime.osx.10.10-x64.CoreCompat.System.Drawing

      # libffi is keg-only
      export LDFLAGS="-L/usr/local/opt/libffi/lib"
      export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"

      ./build.sh
      mkdir ${BUILD_ARTIFACTSTAGINGDIRECTORY}/libgdiplus
      dotnet build -c Release /p:Version=${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}
      dotnet pack -c Release /p:Version=${LIBGDIPLUS_VERSION}.${BUILD_BUILDID} -o ${BUILD_ARTIFACTSTAGINGDIRECTORY}/libgdiplus
    displayName: Build
  - script: |
      cd CoreCompat.System.Drawing.Tests
      curl -L -O https://github.com/dotnet/corefx/archive/v2.2.5.tar.gz
      tar xzf v2.2.5.tar.gz

      export out="$(pwd)/../runtime.osx.10.10-x64.CoreCompat.System.Drawing/out/usr/local/lib"

      echo "Running tests using libraries in $out:"
      ls $out

      export LD_LIBRARY_PATH="$out:$LD_LIBRARY_PATH"
      echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
      dotnet test -l "trx;LogFileName=CoreCompat.System.Drawing.macos.trx"
    displayName: Run System.Drawing.Common unit tests
  - task: PublishTestResults@1
    inputs:
      testRunner: VSTest
      testResultsFiles: '$(Build.SourcesDirectory)/CoreCompat.System.Drawing.Tests/TestResults/*.trx'
    condition: always()
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/libgdiplus'
      artifactName: 'libgdiplus'
      publishLocation: 'Container'
    displayName: Publish
    condition: always()

- job: ppa
  strategy:
    maxParallel: 4
    matrix:
      xenial:
        DIST: xenial
      bionic:
        DIST: bionic
      precise:
        DIST: precise
      trusty:
        DIST: trusty
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      lsb_release -a
    displayName: Check Ubuntu version
  - script: |
      sudo apt-get install -y devscripts debhelper dh-autoreconf dput
    displayName: 'Install dependencies'
  - script: |
      mkdir -p  ~/.gnupg/
      echo allow-loopback-pinentry > ~/.gnupg/gpg-agent.conf
      gpg --allow-secret-key-import --import $BUILD_SOURCESDIRECTORY/ppa.asc
      killall gpg-agent
      echo "${GPG_PASSPHRASE}" >> /tmp/gpg_passphrase
    displayName: 'Configure GPG'
  - script: |
      sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
      sudo apt-get update

      sudo apt-get build-dep libgdiplus
      apt-get source libgdiplus
      
      ls
      git clone https://github.com/mono/libgdiplus --depth 1 --single-branch --branch master
      ls libgdiplus
    displayName: Get sources
  - script: |
      set -e

      cd libgdiplus
      ./autogen.sh
      make clean
      make
      make check
    displayName: Build and test
  - script: |
      set -e

      cd libgdiplus
      LIBGDIPLUS_COMMIT=$(git rev-parse HEAD)
      echo "Building for libgdiplus commit $LIBGDIPLUS_COMMIT"

      git archive --format tar.gz -o ../libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}.tar.gz ${LIBGDIPLUS_COMMIT}
      cd ../

      ls libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}.tar.gz

      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/deb/

      export DEBEMAIL="frederik.carlier@quamotion.mobi"
      export DEBFULLNAME="Frederik Carlier"

      cd libgdiplus-4.2
      uupdate ../libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}.tar.gz
      cd ../libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}
      rm -rf debian/patches/*

      dch -b -v "${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}-0$DIST" --distribution $DIST "libgdiplus (upstream commit ${LIBGDIPLUS_COMMIT})"
      debuild -S -sa -k5314912C -p"$BUILD_SOURCESDIRECTORY/gpg-pass.sh /tmp/gpg_passphrase"
      debuild -b -sa -k5314912C -p"$BUILD_SOURCESDIRECTORY/gpg-pass.sh /tmp/gpg_passphrase"
      cp ../libgdiplus_${LIBGDIPLUS_VERSION}* $BUILD_ARTIFACTSTAGINGDIRECTORY/deb/
    displayName: Build .deb package
  - script: |
      dput ppa:quamotion/ppa libgdiplus_${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}-0${DIST}_source.changes
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Publish PPA
  - script: |
      rm -rf /tmp/gpg_passphrase
    displayName: 'Cleanup GPG key'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/deb' 
      artifactName: 'deb' 
      publishLocation: 'Container'
    displayName: Publish
    condition: always()

- job: osc
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      lsb_release -a
    displayName: Check Ubuntu version
  - script: |
      sudo apt-get install -y osc
    displayName: 'Install dependencies'
  - script: |
      echo "[general]" > ~/.oscrc
      echo "apiurl = https://api.opensuse.org" >> ~/.oscrc
      echo "[https://api.opensuse.org]" >> ~/.oscrc
      echo "user = $OSC_USER" >> ~/.oscrc
      echo "pass = $OSC_PASSWORD" >> ~/.oscrc
    displayName: 'Configure OSC'
  - script: |
      sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
      sudo apt-get update

      sudo apt-get build-dep libgdiplus

      cd $BUILD_SOURCESDIRECTORY
      git clone https://github.com/mono/libgdiplus --depth 1 --single-branch --branch master
      ls libgdiplus
    displayName: Get sources
  - script: |
      set -e

      cd $BUILD_SOURCESDIRECTORY/libgdiplus
      ./autogen.sh
      make clean
      make
      make check
    displayName: Build and test
  - script: |
      set -e

      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/osc
      cd $BUILD_ARTIFACTSTAGINGDIRECTORY/osc
      osc checkout home:qmfrederik

      cd $BUILD_ARTIFACTSTAGINGDIRECTORY/osc/home\:qmfrederik/libgdiplus/
      osc rm *
      
      cd $BUILD_SOURCESDIRECTORY/libgdiplus
      LIBGDIPLUS_COMMIT=$(git rev-parse HEAD)
      echo "Building for libgdiplus commit $LIBGDIPLUS_COMMIT"

      git archive --format tar.gz --prefix libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}/ -o $BUILD_ARTIFACTSTAGINGDIRECTORY/osc/home\:qmfrederik/libgdiplus/libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}.tar.gz ${LIBGDIPLUS_COMMIT}
      cp libgdiplus0.spec.in $BUILD_ARTIFACTSTAGINGDIRECTORY/osc/home\:qmfrederik/libgdiplus/libgdiplus0.spec

      cd $BUILD_ARTIFACTSTAGINGDIRECTORY/osc/home\:qmfrederik/libgdiplus/

      sed -i "s/@VERSION@/${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}/" libgdiplus0.spec
      sed -i "s/tar.bz2/tar.gz/" libgdiplus0.spec
      sed -i "s@%configure@%define _configure ./autogen.sh\n%configure@" libgdiplus0.spec
      cat libgdiplus0.spec
      osc add *
      osc commit -m "Version libgdiplus_${LIBGDIPLUS_VERSION}.${BUILD_BUILDID} - Azure Pipelines ${BUILD_BUILDNUMBER}"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Update OSC archives
  - script: |
      rm -rf ~/.oscrc
    displayName: 'Cleanup OSC key'