variables:
  LIBGDIPLUS_VERSION: '5.6'

jobs:
- job: macos
  pool:
    vmImage: 'xcode9-macos10.13'
  steps:
  - script: |
      brew install autoconf automake libtool pkg-config
    displayName: Install autotools
  - script: |
      cd runtime.osx.10.10-x64.CoreCompat.System.Drawing
      git clone https://github.com/mono/libgdiplus --depth 1 --single-branch --branch master
      brew install libtiff giflib libjpeg glib cairo freetype fontconfig libpng
    displayName: Download sources, install dependencies
  - script: |
      cd runtime.osx.10.10-x64.CoreCompat.System.Drawing

      ./build.sh
      mkdir ${BUILD_ARTIFACTSTAGINGDIRECTORY}/libgdiplus
      dotnet build -c Release /p:Version=${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}
      dotnet pack -c Release /p:Version=${LIBGDIPLUS_VERSION}.${BUILD_BUILDID} -o ${BUILD_ARTIFACTSTAGINGDIRECTORY}/libgdiplus
    displayName: Build
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/libgdiplus'
      artifactName: 'libgdiplus'
      publishLocation: 'Container'
    displayName: Publish

- job: linux
  strategy:
    maxParallel: 4
    matrix:
      xenial:
        DIST: xenial
      bionic:
        DIST: bionic
      precise:
        DIST: precise
      trusty:
        DIST: trusty
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      lsb_release -a
    displayName: Check Ubuntu version
  - script: |
      sudo apt-get install -y devscripts debhelper dh-autoreconf dput
    displayName: 'Install dependencies'
  - script: |
      mkdir -p  ~/.gnupg/
      echo allow-loopback-pinentry > ~/.gnupg/gpg-agent.conf
      gpg --allow-secret-key-import --import $BUILD_SOURCESDIRECTORY/ppa.asc
      killall gpg-agent
      echo "${GPG_PASSPHRASE}" >> /tmp/gpg_passphrase
    displayName: 'Configure GPG'
  - script: |
      sudo apt-get build-dep libgdiplus
      apt-get source libgdiplus
      
      ls
      git clone https://github.com/mono/libgdiplus --depth 1 --single-branch --branch master
      ls libgdiplus
    displayName: Get sources
  - script: |
      set -e

      cd libgdiplus
      ./autogen.sh
      make clean
      make
      make check 
    displayName: Build and test
  - script: |
      set -e

      cd libgdiplus
      LIBGDIPLUS_COMMIT=$(git rev-parse HEAD)
      echo "Building for libgdiplus commit $LIBGDIPLUS_COMMIT"

      git archive --format tar.gz -o ../libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}.tar.gz ${LIBGDIPLUS_COMMIT}
      cd ../

      ls libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}.tar.gz

      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/deb/

      export DEBEMAIL="frederik.carlier@quamotion.mobi"
      export DEBFULLNAME="Frederik Carlier"

      cd libgdiplus-4.2
      uupdate ../libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}.tar.gz
      cd ../libgdiplus-${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}
      rm -rf debian/patches/*

      dch -b -v "${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}-0$DIST" --distribution $DIST "libgdiplus (upstream commit ${LIBGDIPLUS_COMMIT})"
      debuild -S -sa -k5314912C -p"$BUILD_SOURCESDIRECTORY/gpg-pass.sh /tmp/gpg_passphrase"
      cp ../libgdiplus_${LIBGDIPLUS_VERSION}* $BUILD_ARTIFACTSTAGINGDIRECTORY/deb/

      dput ppa:quamotion/ppa ../libgdiplus_${LIBGDIPLUS_VERSION}.${BUILD_BUILDID}-0${DIST}_source.changes
  - script: |
      rm -rf /tmp/gpg_passphrase
    displayName: 'Cleanup GPG key'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/deb' 
      artifactName: 'deb' 
      publishLocation: 'Container'
    displayName: Publish
